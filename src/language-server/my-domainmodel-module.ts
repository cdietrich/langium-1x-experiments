import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { MyDomainmodelGeneratedModule, MyDomainmodelGeneratedSharedModule } from './generated/module';
import { MyDomainmodelValidator, registerValidationChecks } from './my-domainmodel-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type MyDomainmodelAddedServices = {
    validation: {
        MyDomainmodelValidator: MyDomainmodelValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type MyDomainmodelServices = LangiumServices & MyDomainmodelAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const MyDomainmodelModule: Module<MyDomainmodelServices, PartialLangiumServices & MyDomainmodelAddedServices> = {
    validation: {
        MyDomainmodelValidator: () => new MyDomainmodelValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createMyDomainmodelServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    MyDomainmodel: MyDomainmodelServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        MyDomainmodelGeneratedSharedModule
    );
    const MyDomainmodel = inject(
        createDefaultModule({ shared }),
        MyDomainmodelGeneratedModule,
        MyDomainmodelModule
    );
    shared.ServiceRegistry.register(MyDomainmodel);
    registerValidationChecks(MyDomainmodel);
    return { shared, MyDomainmodel };
}
